.TH NEXTPARSER 3-local "94/05/16"
.SH NAME
nextfrombuffer, nextfromfile \- simple input parsing routines
.SH COPYRIGHT
Copyright \(co 1990, 1991, 1992, 1993 University Corporation for Atmospheric Research
.LP
All Rights Reserved
.SH SYNOPSIS
.nf
.B #include """nextparser.h"""
.sp
.B char *nextfrombuffer(in,out,len)
.B char *in;
.B char *out;
.B int len;
.sp
.B int nextfromfile(fp,out,len)
.B FILE *fp;
.B char *out;
.N int len;
.LP
.fi
.SH DESCRIPTION
.B nextparser
is a simple input parsing algorithm that understands a csh-like input syntax.
Each call to one of the interface functions returns a buffer containing
the next
.I word
(which we will define shortly) from either a user supplied input buffer or
an input stream.
.LP
.B nextfrombuffer
parses the next word from the nul terminated character string pointed
to by
.BR in .
.B in
should be initialized with the starting address of the character string
for the first call, and be assigned the value returned by
.B nextfrombuffer
for successive calls.
The word is copied into the buffer
.BR out ,
which is at least
.B len
bytes long. Any words longer than
.B len
are silently truncated. The caller can avoid this by providing an
.B out
buffer that is at least as long as the
.B in
buffer (including the terminating nul). If the parsed word is
.B len
bytes or longer, there will not be room for a terminating nul in
.BR out .
The caller can avoid this by using an
.B out
buffer that is one byte longer than
.BR len ,
and placing a nul in the last position of
.BR out .
.LP
.B nextfromfile
parses the next word from the input stream referenced by the open file
pointer
.BR fp .
The word is copied into the buffer
.BR out ,
which is at least
.B len
bytes long. Similarly to
.BR nextfrombuffer ,
words longer than
.B len
bytes are truncated, but since the caller cannot know in advance the
length of words in the input file,
.B nextfromfile
provides a return code to indicate buffer overflow. The caller has the
option of resizing the
.B out
buffer, rewinding the file to the beginning, and reparsing.
.SH SYNTAX
A
.I word
is a string of characters delimited by the beginning of the buffer or
input stream, the end of the buffer or input stream, or an unescaped and
unquoted whitespace, poundsign, newline or return. Whitespace is either a
horizontal tab or a blank.
.LP
Comments are delimited by an unescaped and unquoted poundsign (#) at
the beginning and by the end of the buffer or input stream or an
unescaped newline or return at the end.  Comments, including the
poundsign, are silently ignored, and parsing continues with the
terminating character.
.LP
A string of characters, including whitespace, can be collected as a
single word if enclosed in matching single (\') or double (") quotes.
A single quote inside a double quoted string (or vice versa) is taken
literally and not interpreted. Quotes do not delimit words; hence
quoted strings can be embedded inside a word. Interpreted quotes are
not placed in the output buffer. A quoted string can be terminated
prematurely by an unescaped newline or return, the end of buffer, or
the end of the input stream.
.LP
The backslash (\\) can be used to escape the normal interpretation of
a character. The semantics of escaped characters depends upon the
character being escaped.
.LP
An escaped newline is silently ignored, the backslash is discarded, and
parsing continues on the next line. This is how lines are continued.
.LP
An escaped blank, horizontal tab, single quote, double quote, newline,
poundsign, return, or any unprintable ASCII character other than nul
(which terminates an ASCII string) is taken literally and deposited in
the output buffer. The backslash is discarded, and parsing continues
with the following character. This can be used to embed bells and
whistles (so to speak) in the string.
.LP
Any other escaped printable ASCII character which has no special meaning
to the parser is deposited in the output buffer preceeded by the escape
backslash. This allows C-style escape sequences such as \\n, \\t, and
\\007 to be retained.
.LP
Unless escaped, unprintable ASCII characters are silently ignored, even
if they appear inside quotes.
.LP
The two parser functions are actually implemented independently; the
semantics for parsing words from buffers versus files necessarily
differ slightly. The parser code is implemented as a simple table
driven push down automata (actually, a finite state machine with a
stack grafted onto it).
.SH "RETURN VALUES"
.B nextfrombuffer
returns a pointer that should be used as the
.B in
argument for the next call. If NULL is returned, then the end of the
buffer has been reached and
.B out
is unchanged.
.LP
.B nextfromfile
returns a flag that indicates the state of the parse in the input
stream. The possible values of the flag are defined in the file
.BR transliterate.h ,
which is automatically included by
.BR nextparser.h .
.B T_ERR
(2) means that a portion of a valid word longer than
.B len
bytes has been deposited into
.BR out .
.B T_MORE
(1) means that a valid word has been deposited into
.BR out .
.B T_EOL
(0) means that the end of the current line has been reached, and
.B out
is unchanged.
.B T_EOF
(-1) means that the end of the input stream has been reached, and
.B out
is unchanged.
.SH BUGS
The author should have been less lazy and supplied a BNF-style grammer
for the input language. The author apologizes.
.LP
Input words can be truncated (and in the case of
.BR nextfromfile ,
.B T_ERR
can be returned) if the internal context stack inside the parser
overflows. The author believes that this is currently impossible given
the syntax of the language being parsed. If it does occur, it is caused
by too deeply nested contexts, for example, nested quotes.
.LP
Words can be longer than one might intuitively think.
It is not unusual to see quoted strings in a UNIX shell
environment reach half a kilobyte (for example, a complete TERMCAP
entry).
.SH FILES
libtools.a
.SH "SEE ALSO"
.BR escapes (3l)
describes the libtools functions
.B esclapse
and
.B escpand
which can be used to collapse and expand C-like escape sequences such as
\\n, \\b, \\r, \\t, and \\\fIo\fR (where \fIo\fR is one to three octal
digits) in a user buffer.
These functions and
.B nextparser
were designed to complement one another.
.LP
.B nextparser
(and several other modules in libtools) makes use of a general purpose parser,
.BR transliterate ,
for which there is no man page. The author apologizes.
.SH VERSION
@(#)nextparser.3l	4.4 94/05/16 jsloan@ncar.ucar.edu
.SH AUTHOR
John Sloan, NCAR/SCD, P.O. Box 3000, Boulder CO 80307
