.TH PACKAGE 3-local "94/05/16"
.SH NAME
package - data structure for parameter passing
.SH COPYRIGHT
Copyright \(co 1993 University Corporation for Atmospheric Research
.LP
All Rights Reserved
.SH SYNOPSIS
.nf
.B #include """package.h"""
.LP
.B PACKAGE *unbundlepackage(parcel)
.B PARCEL parcel;
.LP
.B PARCEL *bundlepackage(package,parcelp)
.B PACKAGE *package;
.B PARCEL *parcelp;
.LP
.B PACKAGE *unstuffpackage(portfolio)
.B PORTFOLIO *portfolio;
.LP
.B PORTFOLIO *stuffpackage(package,portfolio)
.B PACKAGE *package;
.B PORTFOLIO *portfolio;
.LP
.B int freepackage(package)
.B PACKAGE *package;
.fi
.SH DESCRIPTION
This module contains a set of functions which together provide a
mechanism for efficiently handling parameters under a variety of
circumstances. Parameters are in the form of keyword-value pairs, where
the unique keyword and its value are ASCII strings.  There are seven
complementary data structures: PARCEL, PACKAGE, PILE, PACKET,
PARMFILE, PORTFOLIO, and ARGVECTOR.
.LP
In the function signatures in the synopsis above, the formal parameters
have the following meanings.
.LP
.I package
is a pointer to a character string which is a PACKAGE of parameters.
.LP
.I parcel
is a variable which contains the pointer that is the root of the tree
that is the PARCEL data structure.
.LP
.I parcelp
is a value/result argument which is the address of a PARCEL variable
(i.e. &parcel).
.LP
.I portfolio
points to a PORTFOLIO data structure.
.LP
.B unbundlepackage
unbundles (converts)
.I parcel
into a PACKAGE. The function returns the address of the PACKAGE.
The memory associated with the PACKAGE data structure is
dynamically acquired and should eventually be freed if the memory
is to be recovered and reused.
.LP
.B bundlepackage
bundles (parses)
.I package
and bundles the parameters into
.IR parcelp .
The function returns the value of
.IR parcelp .
.LP
.B unstuffpackage
and
.B stuffpackage
are corresponding routines that deal with PORTFOLIOS instead of
PARCELS.
.LP
.B freepackage
frees the dynamically allocated memory associated with a PACKAGE.
.LP
A PACKAGE is an nul terminated ASCII string containing the entire
parameter list in human readable form. Parameters are stored
sequentially in the form \fIkeyword\fR=\fIvalue\fR. This structure can
easily be read from the console, printed on the display, or sent over a
communications link.
.LP
Note that PARCELs can be recursive. You can
.B unbundlepackage
a PARCEL into a PACKAGE, then
.B bundle
the PACKAGE as a value string into another (or even the same) PARCEL.
.LP
Since PACKAGEs are printable ASCII strings, you can always
.B unbundlepackage
a PARCEL into a PACKAGE, and then print it in the usual
manner; a useful feature for debugging.
.SH "RETURN VALUES"
All functions which return a pointer return NULL when an error is
detected. All functions which return
an integer return a negative number when an error is detected.
.SH ERRORS
Virtually the only errors which are returned are the following.
.TP 20
.SM EINVAL
An invalid argument, such as NULL where an address was expected, was
passed to the function.
.TP
.SM ENOMEM
Memory could not be allocated for the dynamic structures.
.SH FILES
libtools.a
.SH "SEE ALSO"
.BR parcel (3l),
.BR portfolio (3l),
.BR pile (3l),
.BR packet (3l),
.BR parmfile (3l),
.BR escapes (3l),
.BR nextparser (3l)
.SH VERSION
@(#)package.3l	4.1 94/05/16 jsloan@ncar.ucar.edu
.SH AUTHOR
John Sloan, NCAR/SCD, P.O. Box 3000, Boulder CO 80307
